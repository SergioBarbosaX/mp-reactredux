{"version":3,"sources":["App.js","serviceWorker.js","store/reducer.js","index.js"],"names":["renderer","marked","Renderer","link","href","title","text","prototype","call","this","replace","setOptions","breaks","App","__html","props","react_default","a","createElement","className","id","rows","columns","placeholder","onChange","onTextChange","value","dangerouslySetInnerHTML","convertToHtml","class","React","Component","connect","state","dispatch","newTextEvent","type","payload","Boolean","window","location","hostname","match","initialState","reducer","arguments","length","undefined","action","newState","Object","objectSpread","target","store","createStore","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iSAKIA,EAAW,IAAIC,IAAOC,SAC1BF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GAElC,OADWL,IAAOC,SAASK,UAAUJ,KAAKK,KAAKC,KAAML,EAAMC,EAAOC,GACtDI,QAAQ,KAAK,wBAG7BT,IAAOU,WAAW,CAChBC,QAAQ,EACRZ,SAAUA,QAINa,0LAIF,MAAO,CAACC,OADCb,IAAOQ,KAAKM,MAAMT,wCAK3B,OACEU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKE,GAAG,oBACNJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,gBAAN,UACAJ,EAAAC,EAAAC,cAAA,YAAUE,GAAG,SAASC,KAAK,KAAKC,QAAQ,MACtCC,YAAY,4BACZC,SAAUf,KAAKM,MAAMU,aAAcC,MAAOjB,KAAKM,MAAMT,QAEzDU,EAAAC,EAAAC,cAAA,OAAKE,GAAG,uBACNJ,EAAAC,EAAAC,cAAA,KAAGE,GAAG,mBAAN,aACAJ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUO,wBAAyBlB,KAAKmB,mBAGlDZ,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UACNJ,EAAAC,EAAAC,cAAA,yBAAgBF,EAAAC,EAAAC,cAAA,QAAMW,MAAM,gBAA5B,sBACAb,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,QAAMW,MAAM,gBAAf,IAAqCb,EAAAC,EAAAC,cAAA,QAAMW,MAAM,2BAvBzCC,IAAMC,WA0CTC,cAZS,SAACC,GACvB,MAAO,CACL3B,KAAM2B,EAAM3B,OAIW,SAAC4B,GAC1B,MAAO,CACLT,aAAc,SAACU,GAAD,OAAkBD,EAAS,CAACE,KAAK,cAAeC,QAASF,OAI5DH,CAA8CnB,GC/CzCyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,8EC8BAC,EAAe,CACnBrC,KAjDuB,uvCA8DVsC,EAVC,WAAkC,IAAjCX,EAAiCY,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBF,EAAcK,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACxCE,EAAQC,OAAAC,EAAA,EAAAD,CAAA,GAAOjB,GAErB,MAAoB,gBAAhBe,EAAOZ,KACFc,OAAAC,EAAA,EAAAD,CAAA,GAAIjB,EAAX,CAAkB3B,KAAM0C,EAAOX,QAAQe,OAAO1B,QAGzCuB,GCjDLI,EAAQC,YAAYV,GAE1BW,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAUJ,MAAOA,GAAOrC,EAAAC,EAAAC,cAACwC,EAAD,OAAoBC,SAASC,eAAe,SFqH9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b76089b8.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\nimport marked from 'marked';\nimport { connect } from 'react-redux';\n\nvar renderer = new marked.Renderer();\nrenderer.link = function(href, title, text) {\n    var link = marked.Renderer.prototype.link.call(this, href, title, text);\n    return link.replace(\"<a\",\"<a target='_blank' \");\n};\n\nmarked.setOptions({\n  breaks: true,\n  renderer: renderer\n});\n\n\nclass App extends React.Component {\n\n  convertToHtml() {\n    let md = marked(this.props.text);\n    return {__html : md};\n  } \n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"editor-container\">\n          <p id=\"editor-title\">Editor</p>\n          <textarea id=\"editor\" rows=\"20\" columns=\"200\" \n            placeholder=\"Text to transform to html\"\n            onChange={this.props.onTextChange} value={this.props.text}></textarea>\n        </div>\n        <div id=\"previewer-container\">\n          <p id=\"previewer-title\">Previewer</p>\n          <div id=\"preview\" dangerouslySetInnerHTML={this.convertToHtml()}>\n          </div>\n        </div>\n        <div id=\"footer\">\n          <p>Designed and <span class=\"fas fa-code\"></span> by Sergio Barbosa</p>\n          <p><span class=\"fab fa-sass\"></span> <span class=\"fab fa-react\"></span></p>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    text: state.text\n  }\n};\n\nconst mapDispatchToProps = (dispatch) => { \n  return {\n    onTextChange: (newTextEvent) => dispatch({type:'UPDATE_TEXT', payload: newTextEvent})\n  }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps) (App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultMarkdownText = \n  `# Welcome to my React Markdown Previewer!\n\n  ## This is a sub-heading...\n  ### And here's some other cool stuff:\n    \n  Heres some code, \\`<div></div>\\`, between 2 backticks.\n\n  \\`\\`\\`\n  // this is multi-line code:\n\n  function anotherExample(firstLine, lastLine) {\n    if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n      return multiLineCode;\n    }\n  }\n  \\`\\`\\`\n    \n  You can also make text **bold**... whoa!\n  Or _italic_.\n  Or... wait for it... **_both!_**\n  And feel free to go crazy ~~crossing stuff out~~.\n\n  There's also [links](https://www.freecodecamp.com), and\n   > Block Quotes!\n\n  And if you want to get really crazy, even tables:\n\n  Wild Header | Crazy Header | Another Header?\n  ------------ | ------------- | ------------- \n  Your content can | be here, and it | can be here....\n  And here. | Okay. | I think we get it.\n\n  - And of course there are lists.\n    - Some are bulleted.\n        - With different indentation levels.\n          - That look like this.\n\n\n  1. And there are numbererd lists too.\n  1. Use just 1s if you want! \n  1. But the list goes on...\n  - Even if you use dashes or asterisks.\n  * And last but not least, let's not forget embedded images:\n\n  ![React Logo w/ Text](https://goo.gl/Umyytc)\n  `;\n\nconst initialState = {\n  text: defaultMarkdownText\n}\n\nconst reducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    if (action.type === 'UPDATE_TEXT') {\n      return {...state, text: action.payload.target.value};\n    }\n\n    return newState;\n}\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}